/* The following code was generated by JFlex 1.6.1 */


import java_cup.runtime.*;
import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>c.jflex</tt>
 */
class CLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int LINE_COMMENT = 4;
  public static final int STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\12\1\14\1\14\1\13\22\0\1\104\1\72\1\103"+
    "\2\0\1\62\1\75\1\11\1\56\1\57\1\101\1\77\1\70\1\100"+
    "\1\10\1\17\1\5\3\7\4\1\2\2\1\65\1\67\1\61\1\71"+
    "\1\63\1\74\1\23\6\4\5\3\1\55\1\3\1\53\6\3\1\54"+
    "\2\3\1\6\2\3\1\64\1\20\1\66\1\102\1\3\1\0\1\27"+
    "\1\24\1\31\1\40\1\26\1\43\1\44\1\33\1\36\1\3\1\30"+
    "\1\41\1\51\1\21\1\34\1\50\1\3\1\25\1\32\1\35\1\37"+
    "\1\46\1\45\1\42\1\47\1\52\1\60\1\76\1\16\1\73\6\0"+
    "\1\15\u1fa2\0\1\15\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\0\1\4\1\1\1\5\1\1"+
    "\1\6\1\4\1\7\1\10\1\11\1\12\17\5\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\2\2\41\1\3"+
    "\1\42\1\3\1\43\1\44\1\45\1\46\1\47\2\50"+
    "\1\0\1\50\2\0\1\51\1\52\1\53\16\5\1\54"+
    "\2\5\1\55\7\5\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\101\1\50\2\110"+
    "\1\111\1\112\20\5\1\113\4\5\1\114\6\5\1\115"+
    "\1\116\1\0\1\50\1\110\3\5\1\117\1\120\1\5"+
    "\1\121\1\122\14\5\1\123\1\5\1\124\1\5\1\125"+
    "\1\5\1\126\1\50\1\110\1\127\3\5\1\130\1\5"+
    "\1\131\11\5\1\132\1\133\1\5\1\50\1\110\1\134"+
    "\1\5\1\135\1\5\1\136\1\137\1\140\1\141\1\142"+
    "\3\5\1\143\1\5\1\50\1\110\2\5\1\144\1\5"+
    "\1\145\1\5\1\50\1\110\1\146\1\147\1\150\1\151"+
    "\1\50\1\110\1\50\1\110\6\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u0114\0\u0114\0\u02b2\0\u0114\0\u02f7\0\u033c"+
    "\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564"+
    "\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0114\0\u0114\0\u0114"+
    "\0\u0702\0\u0747\0\u078c\0\u0114\0\u07d1\0\u0114\0\u0114\0\u0114"+
    "\0\u0816\0\u085b\0\u0114\0\u0114\0\u08a0\0\u08e5\0\u092a\0\u096f"+
    "\0\u09b4\0\u09f9\0\u0114\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0114"+
    "\0\u0114\0\u0114\0\u0114\0\u0b52\0\u0114\0\u0b97\0\u0bdc\0\u0c21"+
    "\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0114\0\u0114\0\u0dbf"+
    "\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7"+
    "\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u019e\0\u1185\0\u11ca"+
    "\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2"+
    "\0\u1437\0\u0114\0\u0114\0\u147c\0\u0114\0\u0114\0\u0114\0\u0114"+
    "\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114"+
    "\0\u0114\0\u0114\0\u14c1\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114"+
    "\0\u0114\0\u0114\0\u1506\0\u154b\0\u1590\0\u0c66\0\u0114\0\u0114"+
    "\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8"+
    "\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0"+
    "\0\u019e\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u019e\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u0114\0\u0114\0\u1506\0\u1cd7"+
    "\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u019e\0\u019e\0\u1e30\0\u019e"+
    "\0\u019e\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013"+
    "\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u019e\0\u21b1\0\u019e"+
    "\0\u21f6\0\u019e\0\u223b\0\u019e\0\u2280\0\u22c5\0\u019e\0\u230a"+
    "\0\u234f\0\u2394\0\u019e\0\u23d9\0\u019e\0\u241e\0\u2463\0\u24a8"+
    "\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u019e\0\u019e"+
    "\0\u268b\0\u26d0\0\u2715\0\u019e\0\u275a\0\u019e\0\u279f\0\u019e"+
    "\0\u019e\0\u019e\0\u019e\0\u019e\0\u27e4\0\u2829\0\u286e\0\u019e"+
    "\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u019e\0\u2a0c\0\u019e"+
    "\0\u2a51\0\u2a96\0\u2adb\0\u019e\0\u019e\0\u019e\0\u019e\0\u2b20"+
    "\0\u2b65\0\u2baa\0\u0114\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03"+
    "\0\u0159";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\2\7\1\10\1\7\1\6\1\11\1\12"+
    "\1\13\2\0\1\5\1\14\1\15\1\5\1\7\1\13"+
    "\1\16\1\17\1\20\1\21\2\7\1\22\1\23\2\7"+
    "\1\24\1\25\1\26\1\27\1\30\1\7\1\31\1\32"+
    "\1\33\1\34\4\7\1\35\2\7\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\13\17\64\1\65\61\64\1\66"+
    "\3\64\12\67\1\70\1\71\2\0\67\67\12\72\1\73"+
    "\3\0\2\72\1\74\62\72\1\75\1\72\106\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\76\75\0\7\7\11\0"+
    "\1\7\2\0\32\7\30\0\1\77\1\6\2\0\1\100"+
    "\1\101\1\102\1\76\31\0\1\101\43\0\2\76\2\0"+
    "\1\76\1\0\1\76\1\103\74\0\12\104\4\0\67\104"+
    "\17\0\1\105\51\0\1\106\7\0\1\107\4\0\7\7"+
    "\11\0\1\7\2\0\1\7\1\110\30\7\30\0\7\7"+
    "\11\0\1\7\2\0\2\7\1\111\27\7\30\0\7\7"+
    "\11\0\1\112\2\0\15\7\1\113\1\114\13\7\30\0"+
    "\7\7\11\0\1\7\2\0\3\7\1\115\3\7\1\116"+
    "\1\117\21\7\30\0\7\7\11\0\1\7\2\0\7\7"+
    "\1\120\1\7\1\121\1\122\6\7\1\123\10\7\30\0"+
    "\7\7\11\0\1\7\2\0\23\7\1\124\6\7\30\0"+
    "\7\7\11\0\1\125\2\0\17\7\1\126\12\7\30\0"+
    "\7\7\11\0\1\127\2\0\32\7\30\0\7\7\11\0"+
    "\1\7\2\0\2\7\1\130\5\7\1\131\21\7\30\0"+
    "\7\7\11\0\1\7\2\0\10\7\1\132\21\7\30\0"+
    "\7\7\11\0\1\7\2\0\10\7\1\133\4\7\1\134"+
    "\14\7\30\0\7\7\11\0\1\7\2\0\10\7\1\135"+
    "\21\7\30\0\7\7\11\0\1\7\2\0\7\7\1\136"+
    "\22\7\30\0\7\7\11\0\1\7\2\0\10\7\1\137"+
    "\21\7\30\0\7\7\11\0\1\7\2\0\30\7\1\140"+
    "\1\7\110\0\1\141\1\40\2\0\1\44\3\0\1\142"+
    "\76\0\1\14\5\0\1\143\76\0\1\144\5\0\1\145"+
    "\76\0\1\46\112\0\1\146\104\0\1\147\104\0\1\150"+
    "\3\0\1\151\100\0\1\152\4\0\1\153\77\0\1\154"+
    "\5\0\1\155\70\0\1\156\5\0\1\157\6\0\1\160"+
    "\75\0\1\161\104\0\1\162\13\0\17\64\1\0\61\64"+
    "\1\0\3\64\17\0\1\163\61\0\1\71\22\0\1\70"+
    "\65\0\12\67\4\0\67\67\11\164\1\165\1\71\3\0"+
    "\3\164\1\166\2\164\1\167\10\164\1\170\5\164\1\171"+
    "\37\164\1\172\1\173\1\0\2\76\2\0\1\76\1\0"+
    "\1\76\76\0\1\174\1\6\2\0\1\174\1\0\1\174"+
    "\1\76\75\0\1\77\1\6\2\0\1\100\1\0\1\102"+
    "\1\76\75\0\2\175\1\0\1\175\1\176\1\0\1\175"+
    "\14\0\1\175\1\0\2\175\1\0\1\175\6\0\1\175"+
    "\2\0\1\175\42\0\1\77\1\6\2\0\1\77\1\0"+
    "\1\77\1\76\104\0\1\177\105\0\1\200\112\0\1\105"+
    "\66\0\7\7\11\0\1\7\2\0\2\7\1\201\27\7"+
    "\30\0\7\7\11\0\1\7\2\0\11\7\1\202\6\7"+
    "\1\203\11\7\30\0\7\7\11\0\1\7\2\0\13\7"+
    "\1\204\16\7\30\0\7\7\11\0\1\7\2\0\6\7"+
    "\1\205\23\7\30\0\7\7\11\0\1\7\2\0\11\7"+
    "\1\206\20\7\30\0\7\7\11\0\1\7\2\0\6\7"+
    "\1\207\23\7\30\0\7\7\11\0\1\7\2\0\3\7"+
    "\1\210\26\7\30\0\7\7\11\0\1\211\2\0\32\7"+
    "\30\0\7\7\11\0\1\7\2\0\10\7\1\212\21\7"+
    "\30\0\7\7\11\0\1\7\2\0\1\7\1\213\1\7"+
    "\1\214\26\7\30\0\7\7\11\0\1\7\2\0\20\7"+
    "\1\215\5\7\1\216\3\7\30\0\7\7\11\0\1\7"+
    "\2\0\12\7\1\217\17\7\30\0\7\7\11\0\1\7"+
    "\2\0\24\7\1\220\5\7\30\0\7\7\11\0\1\7"+
    "\2\0\11\7\1\221\20\7\30\0\7\7\11\0\1\7"+
    "\2\0\6\7\1\222\23\7\30\0\7\7\11\0\1\7"+
    "\2\0\17\7\1\223\12\7\30\0\7\7\11\0\1\7"+
    "\2\0\13\7\1\224\16\7\30\0\7\7\11\0\1\225"+
    "\2\0\32\7\30\0\7\7\11\0\1\7\2\0\1\7"+
    "\1\226\30\7\30\0\7\7\11\0\1\7\2\0\10\7"+
    "\1\227\21\7\30\0\7\7\11\0\1\7\2\0\11\7"+
    "\1\230\20\7\30\0\7\7\11\0\1\7\2\0\12\7"+
    "\1\231\17\7\30\0\7\7\11\0\1\7\2\0\12\7"+
    "\1\232\2\7\1\233\14\7\30\0\7\7\11\0\1\7"+
    "\2\0\31\7\1\234\120\0\1\235\104\0\1\236\13\0"+
    "\12\163\4\0\67\163\12\0\1\71\71\0\1\237\1\0"+
    "\1\240\1\6\2\0\1\240\1\0\1\240\1\76\75\0"+
    "\2\241\1\0\2\241\1\0\1\241\14\0\1\241\1\0"+
    "\2\241\1\0\1\241\6\0\1\241\2\0\1\241\42\0"+
    "\7\7\11\0\1\7\2\0\3\7\1\242\26\7\30\0"+
    "\7\7\11\0\1\7\2\0\13\7\1\243\16\7\30\0"+
    "\7\7\11\0\1\7\2\0\12\7\1\244\17\7\30\0"+
    "\7\7\11\0\1\7\2\0\25\7\1\245\4\7\30\0"+
    "\7\7\11\0\1\7\2\0\2\7\1\246\27\7\30\0"+
    "\7\7\11\0\1\7\2\0\2\7\1\247\27\7\30\0"+
    "\7\7\11\0\1\7\2\0\2\7\1\250\27\7\30\0"+
    "\7\7\11\0\1\7\2\0\1\7\1\251\30\7\30\0"+
    "\7\7\11\0\1\7\2\0\6\7\1\252\2\7\1\253"+
    "\20\7\30\0\7\7\11\0\1\7\2\0\1\7\1\254"+
    "\30\7\30\0\7\7\11\0\1\7\2\0\13\7\1\255"+
    "\16\7\30\0\7\7\11\0\1\7\2\0\11\7\1\256"+
    "\20\7\30\0\7\7\11\0\1\257\2\0\32\7\30\0"+
    "\7\7\11\0\1\7\2\0\2\7\1\260\27\7\30\0"+
    "\7\7\11\0\1\7\2\0\11\7\1\261\20\7\30\0"+
    "\7\7\11\0\1\7\2\0\2\7\1\262\27\7\30\0"+
    "\7\7\11\0\1\7\2\0\12\7\1\263\17\7\30\0"+
    "\7\7\11\0\1\7\2\0\3\7\1\264\26\7\30\0"+
    "\7\7\11\0\1\7\2\0\1\265\31\7\30\0\7\7"+
    "\11\0\1\7\2\0\20\7\1\266\11\7\30\0\7\7"+
    "\11\0\1\7\2\0\3\7\1\267\26\7\30\0\7\7"+
    "\11\0\1\7\2\0\10\7\1\270\21\7\30\0\7\7"+
    "\11\0\1\7\2\0\15\7\1\271\14\7\30\0\7\7"+
    "\11\0\1\7\2\0\14\7\1\272\15\7\30\0\7\7"+
    "\11\0\1\7\2\0\3\7\1\273\26\7\30\0\7\7"+
    "\11\0\1\7\2\0\31\7\1\274\30\0\1\275\1\6"+
    "\2\0\1\275\1\0\1\275\1\76\75\0\2\276\1\0"+
    "\2\276\1\0\1\276\14\0\1\276\1\0\2\276\1\0"+
    "\1\276\6\0\1\276\2\0\1\276\42\0\7\7\11\0"+
    "\1\7\2\0\4\7\1\277\25\7\30\0\7\7\11\0"+
    "\1\7\2\0\1\7\1\300\30\7\30\0\7\7\11\0"+
    "\1\7\2\0\6\7\1\301\23\7\30\0\7\7\11\0"+
    "\1\7\2\0\1\7\1\302\30\7\30\0\7\7\11\0"+
    "\1\7\2\0\11\7\1\303\20\7\30\0\7\7\11\0"+
    "\1\7\2\0\12\7\1\304\17\7\30\0\7\7\11\0"+
    "\1\7\2\0\11\7\1\305\20\7\30\0\7\7\11\0"+
    "\1\7\2\0\5\7\1\306\24\7\30\0\7\7\11\0"+
    "\1\7\2\0\12\7\1\307\17\7\30\0\7\7\11\0"+
    "\1\7\2\0\2\7\1\310\27\7\30\0\7\7\11\0"+
    "\1\7\2\0\10\7\1\311\21\7\30\0\7\7\11\0"+
    "\1\7\2\0\5\7\1\312\24\7\30\0\7\7\11\0"+
    "\1\7\2\0\14\7\1\313\15\7\30\0\7\7\11\0"+
    "\1\7\2\0\20\7\1\314\11\7\30\0\7\7\11\0"+
    "\1\7\2\0\13\7\1\315\16\7\30\0\7\7\11\0"+
    "\1\7\2\0\15\7\1\316\14\7\30\0\7\7\11\0"+
    "\1\7\2\0\11\7\1\317\20\7\30\0\7\7\11\0"+
    "\1\7\2\0\2\7\1\320\27\7\30\0\7\7\11\0"+
    "\1\7\2\0\11\7\1\321\20\7\30\0\1\322\1\6"+
    "\2\0\1\322\1\0\1\322\1\76\75\0\2\323\1\0"+
    "\2\323\1\0\1\323\14\0\1\323\1\0\2\323\1\0"+
    "\1\323\6\0\1\323\2\0\1\323\42\0\7\7\11\0"+
    "\1\324\2\0\32\7\30\0\7\7\11\0\1\7\2\0"+
    "\11\7\1\325\20\7\30\0\7\7\11\0\1\326\2\0"+
    "\32\7\30\0\7\7\11\0\1\327\2\0\32\7\30\0"+
    "\7\7\11\0\1\7\2\0\11\7\1\330\20\7\30\0"+
    "\7\7\11\0\1\7\2\0\5\7\1\331\24\7\30\0"+
    "\7\7\11\0\1\7\2\0\14\7\1\332\15\7\30\0"+
    "\7\7\11\0\1\7\2\0\17\7\1\333\12\7\30\0"+
    "\7\7\11\0\1\7\2\0\7\7\1\334\22\7\30\0"+
    "\7\7\11\0\1\7\2\0\2\7\1\335\27\7\30\0"+
    "\7\7\11\0\1\336\2\0\32\7\30\0\7\7\11\0"+
    "\1\7\2\0\15\7\1\337\14\7\30\0\7\7\11\0"+
    "\1\7\2\0\2\7\1\340\27\7\30\0\7\7\11\0"+
    "\1\7\2\0\12\7\1\341\17\7\30\0\1\342\1\6"+
    "\2\0\1\342\1\0\1\342\1\76\75\0\2\343\1\0"+
    "\2\343\1\0\1\343\14\0\1\343\1\0\2\343\1\0"+
    "\1\343\6\0\1\343\2\0\1\343\42\0\7\7\11\0"+
    "\1\7\2\0\2\7\1\344\27\7\30\0\7\7\11\0"+
    "\1\7\2\0\13\7\1\345\16\7\30\0\7\7\11\0"+
    "\1\7\2\0\17\7\1\346\12\7\30\0\7\7\11\0"+
    "\1\7\2\0\2\7\1\347\27\7\30\0\7\7\11\0"+
    "\1\7\2\0\11\7\1\350\20\7\30\0\7\7\11\0"+
    "\1\7\2\0\15\7\1\351\14\7\30\0\1\352\1\6"+
    "\2\0\1\352\1\0\1\352\1\76\75\0\2\353\1\0"+
    "\2\353\1\0\1\353\14\0\1\353\1\0\2\353\1\0"+
    "\1\353\6\0\1\353\2\0\1\353\42\0\7\7\11\0"+
    "\1\7\2\0\1\7\1\354\30\7\30\0\7\7\11\0"+
    "\1\7\2\0\2\7\1\355\27\7\30\0\7\7\11\0"+
    "\1\7\2\0\14\7\1\356\15\7\30\0\7\7\11\0"+
    "\1\7\2\0\2\7\1\357\27\7\30\0\1\360\1\6"+
    "\2\0\1\360\1\0\1\360\1\76\75\0\2\361\1\0"+
    "\2\361\1\0\1\361\14\0\1\361\1\0\2\361\1\0"+
    "\1\361\6\0\1\361\2\0\1\361\42\0\1\362\1\6"+
    "\2\0\1\362\1\0\1\362\1\76\75\0\2\363\1\0"+
    "\2\363\1\0\1\363\14\0\1\363\1\0\2\363\1\0"+
    "\1\363\6\0\1\363\2\0\1\363\42\0\1\364\1\6"+
    "\2\0\1\364\1\0\1\364\1\76\75\0\1\365\1\6"+
    "\2\0\1\365\1\0\1\365\1\76\75\0\1\366\1\6"+
    "\2\0\1\366\1\0\1\366\1\76\75\0\1\367\1\6"+
    "\2\0\1\367\1\0\1\367\1\76\75\0\1\370\1\6"+
    "\2\0\1\370\1\0\1\370\1\76\75\0\1\371\1\6"+
    "\2\0\1\371\1\0\1\371\1\76\74\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11592];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\0\1\11\5\1\2\11\1\1\1\11\17\1"+
    "\3\11\3\1\1\11\1\1\3\11\2\1\2\11\6\1"+
    "\1\11\4\1\4\11\1\1\1\11\3\1\1\0\1\1"+
    "\2\0\1\1\2\11\32\1\2\11\1\1\16\11\1\1"+
    "\7\11\4\1\2\11\34\1\2\11\1\0\123\1\1\11"+
    "\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
    StringBuffer buff = new StringBuffer();

 	int countNum = 0;
	int countID = 0;
	int countString = 0;
	


	
/**
 * Return a new Symbol with the given token id, and with the current line and
 * column numbers.
 */
Symbol newSym(int tokenId) {
    return new Symbol(tokenId, yyline, yycolumn);
}

/**
 * Return a new Symbol with the given token id, the current line and column
 * numbers, and the given token value.  The value is used for tokens such as
 * identifiers and numbers.
 */
Symbol newSym(int tokenId, Object value) {
    return new Symbol(tokenId, yyline, yycolumn, value);
}

 private long parseNum(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case COMMENT: {
              yybegin(YYINITIAL);return newSym(sym.ERROR, "EOF in comment");
            }
            case 250: break;
            default:
          { 	switch(yystate()) {
		case YYINITIAL:
			break;
		case LINE_COMMENT:
			break;
		case STRING:
			yybegin(YYINITIAL);
			return newSym(sym.ERROR, "EOF in string constant");
		case COMMENT:
			yybegin(YYINITIAL);
			return newSym(sym.ERROR, "EOF in comment");
	}

/* print tables */
/*	
        

	System.out.println("symTable:");
	Set<Integer> keys = Tables.symTable.keySet();
        for(Integer key: keys){
            System.out.println("Value of "+key+" is: "+Tables.symTable.get(key));
        }
	System.out.println("numTable:");
	keys = Tables.numTable.keySet();
        for(Integer key: keys){
            System.out.println("Value of "+key+" is: "+Tables.numTable.get(key));
        }
	System.out.println("stringTable:");
	keys = Tables.stringTable.keySet();
        for(Integer key: keys){
            System.out.println("Value of "+key+" is: "+Tables.stringTable.get(key));
        }
*/

    return newSym(sym.EOF);
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Tables.numTable.put(countNum, new Integer(yytext()) );int c = countNum; countNum++; return newSym(sym.CONSTANT,c);
            }
          case 106: break;
          case 2: 
            { /* Eat non-comment delimiters */
            }
          case 107: break;
          case 3: 
            { 
            }
          case 108: break;
          case 4: 
            { return newSym(sym.ERROR, yytext());
            }
          case 109: break;
          case 5: 
            { Tables.symTable.put(countID, yytext());int c = countID; countID++; return newSym(sym.ID, c);
            }
          case 110: break;
          case 6: 
            { return newSym(sym.DOT);
            }
          case 111: break;
          case 7: 
            { /* Ignore whitespace. */
            }
          case 112: break;
          case 8: 
            { return newSym(sym.RBRACE);
            }
          case 113: break;
          case 9: 
            { return newSym(sym.DIV);
            }
          case 114: break;
          case 10: 
            { System.out.println("Illegal char, '" + yytext() +"' line: " + yyline + ", column: " + yycolumn);
            }
          case 115: break;
          case 11: 
            { return newSym(sym.LPAREN);
            }
          case 116: break;
          case 12: 
            { return newSym(sym.RPAREN);
            }
          case 117: break;
          case 13: 
            { return newSym(sym.LBRACE);
            }
          case 118: break;
          case 14: 
            { return newSym(sym.LT);
            }
          case 119: break;
          case 15: 
            { return newSym(sym.MOD);
            }
          case 120: break;
          case 16: 
            { return newSym(sym.GT);
            }
          case 121: break;
          case 17: 
            { return newSym(sym.LBRACK);
            }
          case 122: break;
          case 18: 
            { return newSym(sym.COLON);
            }
          case 123: break;
          case 19: 
            { return newSym(sym.RBRACK);
            }
          case 124: break;
          case 20: 
            { return newSym(sym.SEMICOLON);
            }
          case 125: break;
          case 21: 
            { return newSym(sym.COMMA);
            }
          case 126: break;
          case 22: 
            { return newSym(sym.EQ);
            }
          case 127: break;
          case 23: 
            { return newSym(sym.NOT);
            }
          case 128: break;
          case 24: 
            { return newSym(sym.COMP);
            }
          case 129: break;
          case 25: 
            { return newSym(sym.QUESTION);
            }
          case 130: break;
          case 26: 
            { return newSym(sym.AND);
            }
          case 131: break;
          case 27: 
            { return newSym(sym.OR);
            }
          case 132: break;
          case 28: 
            { return newSym(sym.PLUS);
            }
          case 133: break;
          case 29: 
            { return newSym(sym.MINUS);
            }
          case 134: break;
          case 30: 
            { return newSym(sym.MULT);
            }
          case 135: break;
          case 31: 
            { return newSym(sym.XOR);
            }
          case 136: break;
          case 32: 
            { buff.setLength(0); yybegin(STRING);
            }
          case 137: break;
          case 33: 
            { /* Eat a / or * if it doesn't match comment sequence */
            }
          case 138: break;
          case 34: 
            { yybegin(YYINITIAL);
            }
          case 139: break;
          case 35: 
            { buff.append(yytext());
            }
          case 140: break;
          case 36: 
            { return newSym(sym.ERROR, "Unterminated string constant");
            }
          case 141: break;
          case 37: 
            { buff.append('\\');
            }
          case 142: break;
          case 38: 
            { yybegin(YYINITIAL);Tables.stringTable.put(countString, buff);int c = countString; countString++; System.out.println("buffer: " + buff); return newSym(sym.STRING,c);
            }
          case 143: break;
          case 39: 
            { Tables.numTable.put(countNum, new Double(yytext()) );int c = countNum; countNum++; return newSym(sym.CONSTANT,c);
            }
          case 144: break;
          case 40: 
            { Tables.numTable.put(countNum,  new Integer((int) parseNum(0, yylength(), 8)) );int c = countNum; countNum++; return newSym(sym.CONSTANT,c);
            }
          case 145: break;
          case 41: 
            { System.out.print("comment line\n"); yybegin(LINE_COMMENT);
            }
          case 146: break;
          case 42: 
            { return newSym(sym.DIVEQ);
            }
          case 147: break;
          case 43: 
            { yybegin(COMMENT); System.out.print("comment_body\n");
            }
          case 148: break;
          case 44: 
            { return newSym(sym.IF);
            }
          case 149: break;
          case 45: 
            { return newSym(sym.DO);
            }
          case 150: break;
          case 46: 
            { return newSym(sym.LSHIFT);
            }
          case 151: break;
          case 47: 
            { return newSym(sym.LTEQ);
            }
          case 152: break;
          case 48: 
            { return newSym(sym.MODEQ);
            }
          case 153: break;
          case 49: 
            { return newSym(sym.RSHIFT);
            }
          case 154: break;
          case 50: 
            { return newSym(sym.GTEQ);
            }
          case 155: break;
          case 51: 
            { return newSym(sym.EQEQ);
            }
          case 156: break;
          case 52: 
            { return newSym(sym.NOTEQ);
            }
          case 157: break;
          case 53: 
            { return newSym(sym.ANDEQ);
            }
          case 158: break;
          case 54: 
            { return newSym(sym.ANDAND);
            }
          case 159: break;
          case 55: 
            { return newSym(sym.OREQ);
            }
          case 160: break;
          case 56: 
            { return newSym(sym.OROR);
            }
          case 161: break;
          case 57: 
            { return newSym(sym.PLUSEQ);
            }
          case 162: break;
          case 58: 
            { return newSym(sym.PLUSPLUS);
            }
          case 163: break;
          case 59: 
            { return newSym(sym.PTR_OP);
            }
          case 164: break;
          case 60: 
            { return newSym(sym.MINUSEQ);
            }
          case 165: break;
          case 61: 
            { return newSym(sym.MINUSMINUS);
            }
          case 166: break;
          case 62: 
            { return newSym(sym.MULTEQ);
            }
          case 167: break;
          case 63: 
            { return newSym(sym.XOREQ);
            }
          case 168: break;
          case 64: 
            { /* // comments to end of line */
            }
          case 169: break;
          case 65: 
            { return newSym(sym.ERROR,"Illegal escape sequence \""+yytext()+"\"");
            }
          case 170: break;
          case 66: 
            { buff.append('\'');
            }
          case 171: break;
          case 67: 
            { buff.append('\n');
            }
          case 172: break;
          case 68: 
            { buff.append('\b');
            }
          case 173: break;
          case 69: 
            { buff.append('\t');
            }
          case 174: break;
          case 70: 
            { buff.append('\f');
            }
          case 175: break;
          case 71: 
            { buff.append('\"');
            }
          case 176: break;
          case 72: 
            { Tables.numTable.put(countNum, new Integer((int) parseNum(2, yylength(), 16)) );int c = countNum; countNum++; return newSym(sym.CONSTANT,c);
            }
          case 177: break;
          case 73: 
            { return newSym(sym.ELLIPSIS);
            }
          case 178: break;
          case 74: 
            { Tables.numTable.put(countNum, new Character(yytext().charAt(1)));int c = countNum; countNum++; return newSym(sym.CONSTANT,c);
            }
          case 179: break;
          case 75: 
            { return newSym(sym.INT_TYPE);
            }
          case 180: break;
          case 76: 
            { return newSym(sym.FOR);
            }
          case 181: break;
          case 77: 
            { return newSym(sym.LSHIFTEQ);
            }
          case 182: break;
          case 78: 
            { return newSym(sym.RSHIFTEQ);
            }
          case 183: break;
          case 79: 
            { return newSym(sym.ENUM);
            }
          case 184: break;
          case 80: 
            { return newSym(sym.ELSE);
            }
          case 185: break;
          case 81: 
            { return newSym(sym.CASE);
            }
          case 186: break;
          case 82: 
            { return newSym(sym.CHAR_TYPE);
            }
          case 187: break;
          case 83: 
            { return newSym(sym.LONG_TYPE);
            }
          case 188: break;
          case 84: 
            { return newSym(sym.GOTO);
            }
          case 189: break;
          case 85: 
            { return newSym(sym.VOID);
            }
          case 190: break;
          case 86: 
            { return newSym(sym.NULL_LITERAL);
            }
          case 191: break;
          case 87: 
            { return newSym(sym.BREAK);
            }
          case 192: break;
          case 88: 
            { return newSym(sym.CONST);
            }
          case 193: break;
          case 89: 
            { return newSym(sym.SHORT_TYPE);
            }
          case 194: break;
          case 90: 
            { return newSym(sym.FLOAT_TYPE);
            }
          case 195: break;
          case 91: 
            { return newSym(sym.WHILE);
            }
          case 196: break;
          case 92: 
            { return newSym(sym.RETURN);
            }
          case 197: break;
          case 93: 
            { return newSym(sym.EXTERN);
            }
          case 198: break;
          case 94: 
            { return newSym(sym.STRUCT);
            }
          case 199: break;
          case 95: 
            { return newSym(sym.STATIC);
            }
          case 200: break;
          case 96: 
            { return newSym(sym.SIGNED);
            }
          case 201: break;
          case 97: 
            { return newSym(sym.SIZEOF);
            }
          case 202: break;
          case 98: 
            { return newSym(sym.SWITCH);
            }
          case 203: break;
          case 99: 
            { return newSym(sym.DOUBLE_TYPE);
            }
          case 204: break;
          case 100: 
            { return newSym(sym.TYPEDEF);
            }
          case 205: break;
          case 101: 
            { return newSym(sym.DEFAULT);
            }
          case 206: break;
          case 102: 
            { return newSym(sym.REGISTER);
            }
          case 207: break;
          case 103: 
            { return newSym(sym.CONTINUE);
            }
          case 208: break;
          case 104: 
            { return newSym(sym.UNSIGNED);
            }
          case 209: break;
          case 105: 
            { return newSym(sym.VOLATILE);
            }
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
