
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 29 23:16:03 CEST 2016
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 29 23:16:03 CEST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\002\000\002\003\005" +
    "\000\002\003\007\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\002\000\002\004\012\000\002\004\012" +
    "\000\002\006\003\000\002\011\006\000\002\011\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\002\000\002" +
    "\021\004\000\002\021\003\000\002\013\006\000\002\013" +
    "\005\000\002\013\005\000\002\013\006\000\002\013\006" +
    "\000\002\013\005\000\002\013\005\000\002\013\011\000" +
    "\002\013\011\000\002\013\011\000\002\013\003\000\002" +
    "\013\003\000\002\017\003\000\002\017\003\000\002\016" +
    "\003\000\002\016\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\044\002\ufffd\011\020\012\010\050\ufff1\051" +
    "\ufff1\052\ufff1\053\ufff1\054\025\055\014\056\013\057\004" +
    "\062\030\070\015\073\006\075\027\107\017\111\011\001" +
    "\002\000\004\011\ufff5\001\002\000\004\011\163\001\002" +
    "\000\004\107\155\001\002\000\004\011\142\001\002\000" +
    "\116\002\uffdb\006\uffdb\011\uffdb\012\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\062\uffdb" +
    "\070\uffdb\073\uffdb\075\uffdb\102\uffdb\104\uffdb\107\uffdb\110" +
    "\uffdb\111\uffdb\112\uffdb\115\uffdb\117\uffdb\120\uffdb\121\uffdb" +
    "\122\uffdb\123\uffdb\124\uffdb\125\uffdb\126\uffdb\127\uffdb\001" +
    "\002\000\020\011\uffd9\012\uffd9\070\uffd9\073\uffd9\075\uffd9" +
    "\107\uffd9\111\uffd9\001\002\000\020\011\020\012\010\070" +
    "\015\073\006\075\027\107\017\111\011\001\002\000\004" +
    "\011\ufff6\001\002\000\012\050\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\001\002\000\004\107\130\001\002\000\004\002\127" +
    "\001\002\000\020\011\uffda\012\uffda\070\uffda\073\uffda\075" +
    "\uffda\107\uffda\111\uffda\001\002\000\144\002\uffdc\005\120" +
    "\006\uffdc\011\uffdc\012\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\112\031\113\032\124\033\115" +
    "\034\121\035\117\036\116\037\114\040\111\041\123\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\062\uffdc\070\uffdc\073\uffdc\075\uffdc\102\uffdc\104" +
    "\uffdc\107\uffdc\110\uffdc\111\uffdc\112\uffdc\115\uffdc\117\uffdc" +
    "\120\uffdc\121\uffdc\122\uffdc\123\uffdc\124\uffdc\125\uffdc\126" +
    "\uffdc\127\uffdc\001\002\000\044\002\ufffd\011\020\012\010" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\025\055\014\056" +
    "\013\057\004\062\030\070\015\073\006\075\027\107\017" +
    "\111\011\001\002\000\106\002\ufffd\006\035\011\020\012" +
    "\010\022\050\023\055\024\057\025\040\026\052\027\043" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\025\055\014\056" +
    "\013\057\004\062\030\070\015\073\006\075\027\107\017" +
    "\111\011\115\042\117\054\120\037\121\051\122\053\123" +
    "\034\124\036\125\044\126\056\127\041\001\002\000\044" +
    "\002\ufffd\011\020\012\010\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\025\055\014\056\013\057\004\062\030\070\015" +
    "\073\006\075\027\107\017\111\011\001\002\000\004\011" +
    "\ufff4\001\002\000\012\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\001\002\000\012\050\104\051\103\052\105\053\102\001" +
    "\002\000\004\107\031\001\002\000\004\011\uffee\001\002" +
    "\000\020\011\020\012\010\070\015\073\006\075\027\107" +
    "\017\111\011\001\002\000\004\110\064\001\002\000\064" +
    "\006\035\011\020\012\010\022\050\023\055\024\057\025" +
    "\040\026\052\027\043\070\015\073\006\075\027\107\017" +
    "\110\uffe7\111\011\115\042\117\054\120\037\121\051\122" +
    "\053\123\034\124\036\125\044\126\056\127\041\001\002" +
    "\000\020\011\uffcf\012\uffcf\070\uffcf\073\uffcf\075\uffcf\107" +
    "\uffcf\111\uffcf\001\002\000\020\011\uffd1\012\uffd1\070\uffd1" +
    "\073\uffd1\075\uffd1\107\uffd1\111\uffd1\001\002\000\020\011" +
    "\uffc0\012\uffc0\070\uffc0\073\uffc0\075\uffc0\107\uffc0\111\uffc0" +
    "\001\002\000\020\011\uffd2\012\uffd2\070\uffd2\073\uffd2\075" +
    "\uffd2\107\uffd2\111\uffd2\001\002\000\020\011\uffbb\012\uffbb" +
    "\070\uffbb\073\uffbb\075\uffbb\107\uffbb\111\uffbb\001\002\000" +
    "\020\011\uffd0\012\uffd0\070\uffd0\073\uffd0\075\uffd0\107\uffd0" +
    "\111\uffd0\001\002\000\020\011\uffbc\012\uffbc\070\uffbc\073" +
    "\uffbc\075\uffbc\107\uffbc\111\uffbc\001\002\000\020\011\uffc1" +
    "\012\uffc1\070\uffc1\073\uffc1\075\uffc1\107\uffc1\111\uffc1\001" +
    "\002\000\020\011\uffbf\012\uffbf\070\uffbf\073\uffbf\075\uffbf" +
    "\107\uffbf\111\uffbf\001\002\000\020\011\020\012\010\070" +
    "\015\073\006\075\027\107\017\111\011\001\002\000\004" +
    "\110\uffe8\001\002\000\020\011\020\012\010\070\015\073" +
    "\006\075\027\107\017\111\011\001\002\000\020\011\uffbe" +
    "\012\uffbe\070\uffbe\073\uffbe\075\uffbe\107\uffbe\111\uffbe\001" +
    "\002\000\020\011\uffd6\012\uffd6\070\uffd6\073\uffd6\075\uffd6" +
    "\107\uffd6\111\uffd6\001\002\000\020\011\uffc2\012\uffc2\070" +
    "\uffc2\073\uffc2\075\uffc2\107\uffc2\111\uffc2\001\002\000\020" +
    "\011\uffd5\012\uffd5\070\uffd5\073\uffd5\075\uffd5\107\uffd5\111" +
    "\uffd5\001\002\000\020\011\uffd4\012\uffd4\070\uffd4\073\uffd4" +
    "\075\uffd4\107\uffd4\111\uffd4\001\002\000\020\011\uffbd\012" +
    "\uffbd\070\uffbd\073\uffbd\075\uffbd\107\uffbd\111\uffbd\001\002" +
    "\000\020\011\uffd3\012\uffd3\070\uffd3\073\uffd3\075\uffd3\107" +
    "\uffd3\111\uffd3\001\002\000\020\011\uffc3\012\uffc3\070\uffc3" +
    "\073\uffc3\075\uffc3\107\uffc3\111\uffc3\001\002\000\116\002" +
    "\uffe4\006\035\011\uffe4\012\uffe4\022\050\023\055\024\057" +
    "\025\040\026\052\027\043\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\062\uffe4\070\uffe4" +
    "\073\uffe4\075\uffe4\102\061\104\uffe4\107\uffe4\110\uffe4\111" +
    "\uffe4\112\uffe4\115\042\117\054\120\037\121\051\122\053" +
    "\123\034\124\036\125\044\126\056\127\041\001\002\000" +
    "\116\002\uffe3\006\uffe3\011\uffe3\012\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\062\uffe3" +
    "\070\uffe3\073\uffe3\075\uffe3\102\uffe3\104\uffe3\107\uffe3\110" +
    "\uffe3\111\uffe3\112\uffe3\115\uffe3\117\uffe3\120\uffe3\121\uffe3" +
    "\122\uffe3\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127\uffe3\001" +
    "\002\000\116\002\uffe5\006\035\011\uffe5\012\uffe5\022\050" +
    "\023\055\024\057\025\040\026\052\027\043\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\062\uffe5\070\uffe5\073\uffe5\075\uffe5\102\063\104\uffe5\107" +
    "\uffe5\110\uffe5\111\uffe5\112\uffe5\115\042\117\054\120\037" +
    "\121\051\122\053\123\034\124\036\125\044\126\056\127" +
    "\041\001\002\000\116\002\uffe6\006\uffe6\011\uffe6\012\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\062\uffe6\070\uffe6\073\uffe6\075\uffe6\102\uffe6\104" +
    "\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6\115\uffe6\117\uffe6" +
    "\120\uffe6\121\uffe6\122\uffe6\123\uffe6\124\uffe6\125\uffe6\126" +
    "\uffe6\127\uffe6\001\002\000\004\103\065\001\002\000\042" +
    "\011\020\012\010\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054" +
    "\025\055\014\056\013\057\004\070\015\073\006\075\027" +
    "\104\uffe9\107\017\111\011\001\002\000\004\104\101\001" +
    "\002\000\004\011\074\001\002\000\104\006\035\011\020" +
    "\012\010\022\050\023\055\024\057\025\040\026\052\027" +
    "\043\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\025\055\014" +
    "\056\013\057\004\070\015\073\006\075\027\104\uffe9\107" +
    "\017\111\011\115\042\117\054\120\037\121\051\122\053" +
    "\123\034\124\036\125\044\126\056\127\041\001\002\000" +
    "\042\011\020\012\010\050\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\054\025\055\014\056\013\057\004\070\015\073\006\075" +
    "\027\104\uffe9\107\017\111\011\001\002\000\004\104\uffeb" +
    "\001\002\000\004\104\uffea\001\002\000\006\005\075\102" +
    "\076\001\002\000\020\011\020\012\010\070\015\073\006" +
    "\075\027\107\017\111\011\001\002\000\046\002\ufffc\011" +
    "\ufffc\012\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\062\ufffc\070\ufffc\073\ufffc\075" +
    "\ufffc\104\ufffc\107\ufffc\111\ufffc\001\002\000\046\006\035" +
    "\022\050\023\055\024\057\025\040\026\052\027\043\102" +
    "\100\115\042\117\054\120\037\121\051\122\053\123\034" +
    "\124\036\125\044\126\056\127\041\001\002\000\046\002" +
    "\ufffb\011\ufffb\012\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\057\ufffb\062\ufffb\070\ufffb\073" +
    "\ufffb\075\ufffb\104\ufffb\107\ufffb\111\ufffb\001\002\000\116" +
    "\002\uffdd\006\uffdd\011\uffdd\012\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\062\uffdd\070" +
    "\uffdd\073\uffdd\075\uffdd\102\uffdd\104\uffdd\107\uffdd\110\uffdd" +
    "\111\uffdd\112\uffdd\115\uffdd\117\uffdd\120\uffdd\121\uffdd\122" +
    "\uffdd\123\uffdd\124\uffdd\125\uffdd\126\uffdd\127\uffdd\001\002" +
    "\000\004\011\ufff7\001\002\000\004\011\ufff9\001\002\000" +
    "\004\011\ufffa\001\002\000\004\011\ufff8\001\002\000\004" +
    "\002\000\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\uffff\001\002\000\020\011\uffc5\012\uffc5\070\uffc5\073\uffc5" +
    "\075\uffc5\107\uffc5\111\uffc5\001\002\000\020\011\uffcd\012" +
    "\uffcd\070\uffcd\073\uffcd\075\uffcd\107\uffcd\111\uffcd\001\002" +
    "\000\020\011\uffcc\012\uffcc\070\uffcc\073\uffcc\075\uffcc\107" +
    "\uffcc\111\uffcc\001\002\000\020\011\uffc6\012\uffc6\070\uffc6" +
    "\073\uffc6\075\uffc6\107\uffc6\111\uffc6\001\002\000\020\011" +
    "\uffca\012\uffca\070\uffca\073\uffca\075\uffca\107\uffca\111\uffca" +
    "\001\002\000\020\011\uffc7\012\uffc7\070\uffc7\073\uffc7\075" +
    "\uffc7\107\uffc7\111\uffc7\001\002\000\020\011\uffc8\012\uffc8" +
    "\070\uffc8\073\uffc8\075\uffc8\107\uffc8\111\uffc8\001\002\000" +
    "\020\011\uffce\012\uffce\070\uffce\073\uffce\075\uffce\107\uffce" +
    "\111\uffce\001\002\000\020\011\uffc9\012\uffc9\070\uffc9\073" +
    "\uffc9\075\uffc9\107\uffc9\111\uffc9\001\002\000\020\011\020" +
    "\012\010\070\015\073\006\075\027\107\017\111\011\001" +
    "\002\000\020\011\uffc4\012\uffc4\070\uffc4\073\uffc4\075\uffc4" +
    "\107\uffc4\111\uffc4\001\002\000\020\011\uffcb\012\uffcb\070" +
    "\uffcb\073\uffcb\075\uffcb\107\uffcb\111\uffcb\001\002\000\116" +
    "\002\uffe1\006\035\011\uffe1\012\uffe1\022\050\023\055\024" +
    "\057\025\040\026\052\027\043\050\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\062\uffe1\070" +
    "\uffe1\073\uffe1\075\uffe1\102\126\104\uffe1\107\uffe1\110\uffe1" +
    "\111\uffe1\112\uffe1\115\042\117\054\120\037\121\051\122" +
    "\053\123\034\124\036\125\044\126\056\127\041\001\002" +
    "\000\116\002\uffe2\006\uffe2\011\uffe2\012\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\062" +
    "\uffe2\070\uffe2\073\uffe2\075\uffe2\102\uffe2\104\uffe2\107\uffe2" +
    "\110\uffe2\111\uffe2\112\uffe2\115\uffe2\117\uffe2\120\uffe2\121" +
    "\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2" +
    "\001\002\000\004\002\001\001\002\000\020\011\020\012" +
    "\010\070\015\073\006\075\027\107\017\111\011\001\002" +
    "\000\004\110\132\001\002\000\004\103\133\001\002\000" +
    "\042\011\020\012\010\050\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\054\025\055\014\056\013\057\004\070\015\073\006\075" +
    "\027\104\uffe9\107\017\111\011\001\002\000\004\104\135" +
    "\001\002\000\116\002\uffdf\006\uffdf\011\uffdf\012\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\062\uffdf\070\uffdf\073\uffdf\075\uffdf\102\uffdf\104\uffdf" +
    "\107\uffdf\110\uffdf\111\uffdf\112\uffdf\115\uffdf\117\uffdf\120" +
    "\uffdf\121\uffdf\122\uffdf\123\uffdf\124\uffdf\125\uffdf\126\uffdf" +
    "\127\uffdf\001\002\000\050\006\035\022\050\023\055\024" +
    "\057\025\040\026\052\027\043\110\140\112\137\115\042" +
    "\117\054\120\037\121\051\122\053\123\034\124\036\125" +
    "\044\126\056\127\041\001\002\000\116\002\uffd7\006\uffd7" +
    "\011\uffd7\012\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\062\uffd7\070\uffd7\073\uffd7\075" +
    "\uffd7\102\uffd7\104\uffd7\107\uffd7\110\uffd7\111\uffd7\112\uffd7" +
    "\115\uffd7\117\uffd7\120\uffd7\121\uffd7\122\uffd7\123\uffd7\124" +
    "\uffd7\125\uffd7\126\uffd7\127\uffd7\001\002\000\116\002\uffd8" +
    "\006\uffd8\011\uffd8\012\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\057\uffd8\062\uffd8\070\uffd8\073" +
    "\uffd8\075\uffd8\102\uffd8\104\uffd8\107\uffd8\110\uffd8\111\uffd8" +
    "\112\uffd8\115\uffd8\117\uffd8\120\uffd8\121\uffd8\122\uffd8\123" +
    "\uffd8\124\uffd8\125\uffd8\126\uffd8\127\uffd8\001\002\000\116" +
    "\002\uffe0\006\uffe0\011\uffe0\012\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\062\uffe0\070" +
    "\uffe0\073\uffe0\075\uffe0\102\uffe0\104\uffe0\107\uffe0\110\uffe0" +
    "\111\uffe0\112\uffe0\115\uffe0\117\uffe0\120\uffe0\121\uffe0\122" +
    "\uffe0\123\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0\001\002" +
    "\000\010\005\075\102\076\107\143\001\002\000\022\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\025\055\014\056\013" +
    "\057\004\001\002\000\004\110\151\001\002\000\004\011" +
    "\146\001\002\000\006\105\147\110\uffec\001\002\000\022" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\025\055\014\056" +
    "\013\057\004\001\002\000\004\110\uffed\001\002\000\004" +
    "\103\152\001\002\000\042\011\020\012\010\050\ufff1\051" +
    "\ufff1\052\ufff1\053\ufff1\054\025\055\014\056\013\057\004" +
    "\070\015\073\006\075\027\104\uffe9\107\017\111\011\001" +
    "\002\000\004\104\154\001\002\000\044\002\ufff0\011\ufff0" +
    "\012\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\062\ufff0\070\ufff0\073\ufff0\075\ufff0" +
    "\107\ufff0\111\ufff0\001\002\000\020\011\020\012\010\070" +
    "\015\073\006\075\027\107\017\111\011\001\002\000\004" +
    "\110\157\001\002\000\004\103\160\001\002\000\042\011" +
    "\020\012\010\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\025" +
    "\055\014\056\013\057\004\070\015\073\006\075\027\104" +
    "\uffe9\107\017\111\011\001\002\000\004\104\162\001\002" +
    "\000\116\002\uffde\006\uffde\011\uffde\012\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\050\uffde\051\uffde" +
    "\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\062" +
    "\uffde\070\uffde\073\uffde\075\uffde\102\uffde\104\uffde\107\uffde" +
    "\110\uffde\111\uffde\112\uffde\115\uffde\117\uffde\120\uffde\121" +
    "\uffde\122\uffde\123\uffde\124\uffde\125\uffde\126\uffde\127\uffde" +
    "\001\002\000\004\107\164\001\002\000\022\050\ufff1\051" +
    "\ufff1\052\ufff1\053\ufff1\054\025\055\014\056\013\057\004" +
    "\001\002\000\004\110\166\001\002\000\004\103\167\001" +
    "\002\000\042\011\020\012\010\050\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\054\025\055\014\056\013\057\004\070\015\073" +
    "\006\075\027\104\uffe9\107\017\111\011\001\002\000\004" +
    "\104\171\001\002\000\044\002\uffef\011\uffef\012\uffef\050" +
    "\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef" +
    "\057\uffef\062\uffef\070\uffef\073\uffef\075\uffef\107\uffef\111" +
    "\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\024\002\015\003\022\004\020\005\006\006" +
    "\004\007\025\010\023\013\021\017\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\135" +
    "\017\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\121\001\001\000\024\002\107\003\022\004\020\005" +
    "\006\006\004\007\025\010\023\013\021\017\011\001\001" +
    "\000\030\002\106\003\022\004\020\005\006\006\004\007" +
    "\025\010\023\013\021\014\044\017\011\020\046\001\001" +
    "\000\024\002\105\003\022\004\020\005\006\006\004\007" +
    "\025\010\023\013\021\017\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\032\017\011\021\031\001\001" +
    "\000\002\001\001\000\014\013\032\014\044\017\011\020" +
    "\046\021\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\061\017\011\001\001\000\002\001" +
    "\001\000\006\013\057\017\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\044\020\046\001\001\000\002\001" +
    "\001\000\006\014\044\020\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\070\005\066\007\025\010" +
    "\023\012\065\013\067\017\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\070\005\066\007\025\010" +
    "\023\012\072\013\067\014\044\017\011\020\046\001\001" +
    "\000\020\003\070\005\066\007\025\010\023\012\071\013" +
    "\067\017\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\076\017\011\001\001\000" +
    "\002\001\001\000\006\014\044\020\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\124\017\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\044\020" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\032\017\011\021\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\070\005\066\007\025\010\023" +
    "\012\133\013\067\017\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\044\016\140\020\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\144\007\025\010\023\011\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\144\007\025\010\023\011\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\070\005" +
    "\066\007\025\010\023\012\152\013\067\017\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\032\017" +
    "\011\021\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\070\005\066\007\025\010\023\012\160\013" +
    "\067\017\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\144\007\025\010\023\011" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\070\005\066\007\025\010\023\012\167\013\067\017" +
    "\011\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at "+cur_token);
    }
   

    public static void main(String args[]) {
	try {
	    CLexer lexer = new CLexer(new FileReader(args[0]));
	    // start parsing
	    Parser p = new Parser(lexer);
	    System.out.println("Parser runs: ");
            p.parse();
	    System.out.println("Parsing finished!");
	} catch (Exception e) {
	    e.printStackTrace();
	} 
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // boolean_operator ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // boolean_operator ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // boolean_operator ::= GTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolean_operator ::= LTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // boolean_operator ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // boolean_operator ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // boolean_operator ::= OROR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // boolean_operator ::= ANDAND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // boolean_operator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignment_operator ::= OREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assignment_operator ::= XOREQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assignment_operator ::= ANDEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment_operator ::= RSHIFTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assignment_operator ::= LSHIFTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // assignment_operator ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assignment_operator ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assignment_operator ::= MODEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignment_operator ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignment_operator ::= MULTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignment_operator ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operator ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operator ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operator ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operator ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operator ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operator ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rpar_generic ::= RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rpar_generic",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rpar_generic ::= RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rpar_generic",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lpar_generic ::= LBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lpar_generic",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lpar_generic ::= LPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lpar_generic",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= FOR LPAREN loop_statement RPAREN LBRACE statement RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= WHILE LPAREN loop_statement RPAREN LBRACE statement RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= IF LPAREN loop_statement RPAREN LBRACE statement RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= lpar_generic expression rpar_generic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= ID assignment_operator expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= ID assignment_operator expression SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression boolean_operator expression SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression boolean_operator expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression operator expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression operator expression SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // loop_statement ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // loop_statement ::= expression loop_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= expression statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= var_declaration statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param_list ::= type_var ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param_list ::= type_var ID COMMA param_list 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_specifier ::= VOID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_declaration ::= type_specifier ID LPAREN param_list RPAREN LBRACE statement RBRACE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_declaration ::= type_var ID LPAREN param_list RPAREN LBRACE statement RBRACE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_sign ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_sign",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_sign ::= UNSIGNED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_sign",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_sign ::= SIGNED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_sign",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_var ::= type_var_sign_unsign 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_var",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_var ::= DOUBLE_TYPE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_var",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_var ::= FLOAT_TYPE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_var",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_var_sign_unsign ::= type_sign LONG_TYPE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_var_sign_unsign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_var_sign_unsign ::= type_sign INT_TYPE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_var_sign_unsign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_var_sign_unsign ::= type_sign SHORT_TYPE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_var_sign_unsign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type_var_sign_unsign ::= type_sign CHAR_TYPE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_var_sign_unsign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_declaration ::= type_var ID EQ expression SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_declaration ::= type_var ID SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= expression program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= function_declaration program 
            {
              Object RESULT =null;
		 System.out.println("function_declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= var_declaration program 
            {
              Object RESULT =null;
		 System.out.println("var_declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

