/* The following code was generated by JFlex 1.6.1 */


import java_cup.runtime.*;
import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>pascal.jflex</tt>
 */
class PascalLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int LINE_COMMENT = 4;
  public static final int STRING = 6;
  public static final int NUMERIC = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\12\1\14\1\14\1\13\22\0\1\77\1\67\1\76"+
    "\2\0\1\57\1\3\1\11\1\53\1\54\1\4\1\73\1\65\1\74"+
    "\1\10\1\17\1\5\7\2\2\2\1\62\1\64\1\56\1\66\1\60"+
    "\1\71\1\23\6\7\5\1\1\52\1\1\1\50\6\1\1\51\2\1"+
    "\1\6\2\1\1\61\1\20\1\63\1\75\1\1\1\0\1\27\1\24"+
    "\1\33\1\41\1\26\1\44\1\45\1\35\1\37\1\1\1\30\1\42"+
    "\1\1\1\21\1\36\2\1\1\25\1\34\1\32\1\40\1\47\1\46"+
    "\1\43\1\31\1\1\1\55\1\72\1\16\1\70\6\0\1\15\u1fa2\0"+
    "\1\15\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\2\0\1\3\1\4\1\1\1\5"+
    "\1\6\1\1\1\7\1\3\1\10\1\11\1\12\1\13"+
    "\16\4\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\3\40\1\2\1\41"+
    "\1\40\1\42\1\43\1\42\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\0\1\52\2\0\1\53\1\54\1\55"+
    "\15\4\1\56\1\4\1\57\10\4\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\0\1\1\1\104\15\4\1\105\3\4\1\106"+
    "\7\4\1\107\1\110\1\111\1\4\1\112\1\4\1\113"+
    "\1\4\1\114\1\4\1\115\1\116\7\4\1\117\2\4"+
    "\1\120\1\4\1\121\1\4\1\122\1\123\1\124\2\4"+
    "\1\125\1\4\1\126\1\4\1\127\3\4\1\130\1\131"+
    "\1\132\1\4\1\133\2\4\1\134\1\135\1\4\1\136"+
    "\2\4\1\137\1\4\1\140\1\141\1\4\1\142\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0100\0\u0100\0\u0300"+
    "\0\u0100\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0"+
    "\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u0100"+
    "\0\u0100\0\u0100\0\u06c0\0\u0700\0\u0740\0\u0100\0\u0780\0\u0100"+
    "\0\u0100\0\u0100\0\u07c0\0\u0800\0\u0100\0\u0100\0\u0840\0\u0880"+
    "\0\u08c0\0\u0900\0\u0100\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0100"+
    "\0\u0100\0\u0100\0\u0100\0\u0a40\0\u0100\0\u0280\0\u0a80\0\u0100"+
    "\0\u0100\0\u0ac0\0\u0b00\0\u0100\0\u0b40\0\u0b80\0\u0100\0\u0bc0"+
    "\0\u0100\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80"+
    "\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0140\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u0100\0\u0100\0\u1200\0\u0100\0\u0100\0\u0100"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u1240\0\u0b40\0\u0100"+
    "\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440"+
    "\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u0140\0\u15c0\0\u1600"+
    "\0\u1640\0\u0140\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0"+
    "\0\u1800\0\u0100\0\u1840\0\u0100\0\u1880\0\u0140\0\u18c0\0\u0140"+
    "\0\u1900\0\u0140\0\u1940\0\u0140\0\u0140\0\u1980\0\u19c0\0\u1a00"+
    "\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u0140\0\u1b40\0\u1b80\0\u0140"+
    "\0\u1bc0\0\u0140\0\u1c00\0\u0140\0\u0100\0\u0140\0\u1c40\0\u1c80"+
    "\0\u0140\0\u1cc0\0\u0140\0\u1d00\0\u0140\0\u1d40\0\u1d80\0\u1dc0"+
    "\0\u1e00\0\u0140\0\u0140\0\u1e40\0\u0140\0\u1e80\0\u1ec0\0\u0140"+
    "\0\u0140\0\u1f00\0\u0140\0\u1f40\0\u1f80\0\u0140\0\u1fc0\0\u0140"+
    "\0\u0140\0\u2000\0\u0140\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\7\1\14"+
    "\1\15\1\16\2\0\1\6\1\17\1\20\1\6\1\7"+
    "\1\16\1\21\1\22\1\23\1\24\3\7\1\25\1\26"+
    "\1\27\2\7\1\30\1\7\1\31\1\32\1\7\1\33"+
    "\1\34\1\35\1\36\1\37\2\7\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\16\4\64\1\65\12\64\1\66\60\64\12\67"+
    "\1\70\1\71\2\0\62\67\12\72\1\73\3\0\2\72"+
    "\1\74\55\72\1\75\1\72\101\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\27\7\27\0\1\10\2\0\1\10"+
    "\2\0\1\76\70\0\1\77\1\0\1\100\2\0\2\77"+
    "\11\0\1\77\2\0\27\77\13\0\1\101\12\0\1\102"+
    "\2\0\1\103\1\0\2\102\11\0\1\102\2\0\27\102"+
    "\13\0\1\104\13\0\1\10\2\0\1\10\1\105\1\0"+
    "\1\76\32\0\1\105\36\0\1\76\2\0\1\76\72\0"+
    "\12\106\4\0\62\106\4\0\1\107\12\0\1\110\46\0"+
    "\1\111\12\0\2\7\2\0\3\7\11\0\1\7\2\0"+
    "\1\7\1\112\3\7\1\113\21\7\26\0\2\7\2\0"+
    "\3\7\11\0\1\7\2\0\2\7\1\114\24\7\26\0"+
    "\2\7\2\0\3\7\11\0\1\7\2\0\16\7\1\115"+
    "\1\116\7\7\26\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\11\7\1\117\15\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\3\7\1\120\5\7\1\121\1\122"+
    "\14\7\26\0\2\7\2\0\3\7\11\0\1\7\2\0"+
    "\6\7\1\123\2\7\1\124\10\7\1\125\4\7\26\0"+
    "\2\7\2\0\3\7\11\0\1\126\2\0\20\7\1\127"+
    "\6\7\26\0\2\7\2\0\3\7\11\0\1\7\2\0"+
    "\2\7\1\130\7\7\1\131\14\7\26\0\2\7\2\0"+
    "\3\7\11\0\1\7\2\0\12\7\1\132\14\7\26\0"+
    "\2\7\2\0\3\7\11\0\1\7\2\0\12\7\1\133"+
    "\1\134\2\7\1\135\10\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\12\7\1\136\14\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\7\2\0\11\7\1\137\15\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\7\2\0\12\7"+
    "\1\140\14\7\26\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\25\7\1\141\1\7\103\0\1\142\1\42\2\0"+
    "\1\46\3\0\1\143\71\0\1\17\5\0\1\144\71\0"+
    "\1\145\5\0\1\146\71\0\1\50\105\0\1\147\77\0"+
    "\1\150\77\0\1\151\3\0\1\152\73\0\1\153\4\0"+
    "\1\154\72\0\1\155\5\0\1\156\71\0\1\157\11\0"+
    "\4\64\1\0\12\64\1\0\60\64\17\0\1\160\64\0"+
    "\1\161\73\0\12\67\4\0\62\67\12\0\1\71\6\0"+
    "\1\162\2\0\1\163\5\0\1\164\11\0\1\165\32\0"+
    "\1\166\1\0\2\77\2\0\3\77\11\0\1\77\2\0"+
    "\27\77\26\0\2\102\2\0\3\102\11\0\1\102\2\0"+
    "\27\102\26\0\1\102\4\0\2\102\11\0\1\102\2\0"+
    "\27\102\27\0\1\167\2\0\1\167\1\0\1\167\14\0"+
    "\1\167\1\0\2\167\3\0\1\167\5\0\1\167\2\0"+
    "\1\167\44\0\1\170\105\0\1\110\61\0\2\7\2\0"+
    "\3\7\11\0\1\7\2\0\2\7\1\171\24\7\26\0"+
    "\2\7\2\0\3\7\11\0\1\7\2\0\6\7\1\172"+
    "\20\7\26\0\2\7\2\0\3\7\11\0\1\7\2\0"+
    "\6\7\1\173\20\7\26\0\2\7\2\0\3\7\11\0"+
    "\1\7\2\0\10\7\1\174\16\7\26\0\2\7\2\0"+
    "\3\7\11\0\1\7\2\0\6\7\1\175\20\7\26\0"+
    "\2\7\2\0\3\7\11\0\1\7\2\0\13\7\1\176"+
    "\13\7\26\0\2\7\2\0\3\7\11\0\1\7\2\0"+
    "\6\7\1\177\1\7\1\200\16\7\26\0\2\7\2\0"+
    "\3\7\11\0\1\7\2\0\3\7\1\201\23\7\26\0"+
    "\2\7\2\0\3\7\11\0\1\202\2\0\27\7\26\0"+
    "\2\7\2\0\3\7\11\0\1\7\2\0\3\7\1\203"+
    "\23\7\26\0\2\7\2\0\3\7\11\0\1\7\2\0"+
    "\12\7\1\204\14\7\26\0\2\7\2\0\3\7\11\0"+
    "\1\7\2\0\13\7\1\205\13\7\26\0\2\7\2\0"+
    "\3\7\11\0\1\7\2\0\6\7\1\206\20\7\26\0"+
    "\2\7\2\0\3\7\11\0\1\7\2\0\20\7\1\207"+
    "\6\7\26\0\2\7\2\0\3\7\11\0\1\7\2\0"+
    "\14\7\1\210\12\7\26\0\2\7\2\0\3\7\11\0"+
    "\1\211\2\0\27\7\26\0\2\7\2\0\3\7\11\0"+
    "\1\7\2\0\1\7\1\212\25\7\26\0\2\7\2\0"+
    "\3\7\11\0\1\213\2\0\27\7\26\0\2\7\2\0"+
    "\3\7\11\0\1\7\2\0\12\7\1\214\14\7\26\0"+
    "\2\7\2\0\3\7\11\0\1\7\2\0\6\7\1\215"+
    "\20\7\26\0\2\7\2\0\3\7\11\0\1\7\2\0"+
    "\13\7\1\216\13\7\26\0\2\7\2\0\3\7\11\0"+
    "\1\7\2\0\13\7\1\217\2\7\1\220\10\7\26\0"+
    "\2\7\2\0\3\7\11\0\1\7\2\0\26\7\1\221"+
    "\113\0\1\222\71\0\1\223\5\0\1\224\23\0\1\71"+
    "\64\0\1\166\1\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\3\7\1\225\23\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\2\7\1\226\24\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\7\2\0\14\7\1\227\12\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\7\2\0\2\7"+
    "\1\230\24\7\26\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\2\7\1\231\24\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\10\7\1\232\16\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\7\2\0\7\7\1\233\17\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\7\2\0\2\7"+
    "\1\234\24\7\26\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\1\7\1\235\25\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\6\7\1\236\1\7\1\237\16\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\7\2\0\6\7"+
    "\1\240\20\7\26\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\1\7\1\241\25\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\6\7\1\242\20\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\7\2\0\3\7\1\243\23\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\7\2\0\1\244"+
    "\26\7\26\0\2\7\2\0\3\7\11\0\1\7\2\0"+
    "\21\7\1\245\5\7\26\0\2\7\2\0\3\7\11\0"+
    "\1\7\2\0\3\7\1\246\23\7\26\0\2\7\2\0"+
    "\3\7\11\0\1\7\2\0\3\7\1\247\23\7\26\0"+
    "\2\7\2\0\3\7\11\0\1\7\2\0\12\7\1\250"+
    "\14\7\26\0\2\7\2\0\3\7\11\0\1\7\2\0"+
    "\16\7\1\251\10\7\26\0\2\7\2\0\3\7\11\0"+
    "\1\7\2\0\15\7\1\252\11\7\26\0\2\7\2\0"+
    "\3\7\11\0\1\7\2\0\3\7\1\253\23\7\26\0"+
    "\2\7\2\0\3\7\11\0\1\7\2\0\26\7\1\254"+
    "\113\0\1\255\12\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\4\7\1\256\22\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\1\7\1\257\25\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\260\2\0\27\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\7\2\0\11\7\1\261\15\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\7\2\0\13\7"+
    "\1\262\13\7\26\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\6\7\1\263\20\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\13\7\1\264\13\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\7\2\0\6\7\1\265\20\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\7\2\0\7\7"+
    "\1\266\17\7\26\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\14\7\1\267\12\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\16\7\1\270\10\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\7\2\0\16\7\1\271\10\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\7\2\0\6\7"+
    "\1\272\20\7\26\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\2\7\1\273\24\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\6\7\1\274\20\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\275\2\0\27\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\7\2\0\15\7\1\276\11\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\277\2\0\27\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\7\2\0\7\7"+
    "\1\300\17\7\26\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\11\7\1\301\15\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\16\7\1\302\10\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\7\2\0\2\7\1\303\24\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\7\2\0\16\7"+
    "\1\304\10\7\26\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\13\7\1\305\13\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\10\7\1\306\16\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\7\2\0\14\7\1\307\12\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\7\2\0\6\7"+
    "\1\310\20\7\26\0\2\7\2\0\3\7\11\0\1\7"+
    "\2\0\5\7\1\311\21\7\26\0\2\7\2\0\3\7"+
    "\11\0\1\7\2\0\16\7\1\312\10\7\26\0\2\7"+
    "\2\0\3\7\11\0\1\7\2\0\2\7\1\313\24\7"+
    "\26\0\2\7\2\0\3\7\11\0\1\7\2\0\2\7"+
    "\1\314\24\7\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8256];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\1\0\1\10\1\11\7\1\2\11"+
    "\1\1\1\11\16\1\3\11\3\1\1\11\1\1\3\11"+
    "\2\1\2\11\4\1\1\11\4\1\4\11\1\1\1\11"+
    "\2\1\2\11\1\1\1\0\1\11\2\0\1\11\1\1"+
    "\1\11\31\1\2\11\1\1\20\11\1\0\1\1\1\11"+
    "\31\1\1\11\1\1\1\11\30\1\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	// Max size of string constants
    StringBuffer buff = new StringBuffer();

 	int countNum = 0;
	int countID = 0;
	int countString = 0;
	
	int comment_nesting = 0;

	
/**
 * Return a new Symbol with the given token id, and with the current line and
 * column numbers.
 */
Symbol newSym(int tokenId) {
    return new Symbol(tokenId, yyline, yycolumn);
}

/**
 * Return a new Symbol with the given token id, the current line and column
 * numbers, and the given token value.  The value is used for tokens such as
 * identifiers and numbers.
 */
Symbol newSym(int tokenId, Object value) {
    return new Symbol(tokenId, yyline, yycolumn, value);
}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PascalLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case COMMENT: {
              System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: <<EOF>>");
              System.out.println("action [225] { yybegin(YYINITIAL);return newSym(sym.ERROR, \"EOF in comment\"); }");
              yybegin(YYINITIAL);return newSym(sym.ERROR, "EOF in comment");
            }
            case 205: break;
            default:
          {     switch(zzLexicalState) {
		case YYINITIAL:
		break;
		case COMMENT:
		yybegin(YYINITIAL);
		return newSym(sym.ERROR, "EOF in comment");
		case LINE_COMMENT:
		break;
		case STRING:
		yybegin(YYINITIAL);
		return newSym(sym.ERROR, "EOF in string constant");
	}

	Set<Integer> keys = Tables.symTable.keySet();
        for(Integer key: keys){
            System.out.println("Value of "+key+" is: "+Tables.symTable.get(key));
        }
	
	Set<Integer> keys = Tables.numTable.keySet();
        for(Integer key: keys){
            System.out.println("Value of "+key+" is: "+Tables.numTable.get(key));
        }

	Set<Integer> keys = Tables.stringTable.keySet();
        for(Integer key: keys){
            System.out.println("Value of "+key+" is: "+Tables.stringTable.get(key));
        }
    return newSym(sym.EOF);
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { Tables.numTable.put(countNum, new Integer(yytext()) );int c = countNum; countNum++; return newSym(sym.CONSTANT,c); }");
            { Tables.numTable.put(countNum, new Integer(yytext()) );int c = countNum; countNum++; return newSym(sym.CONSTANT,c);
            }
          case 100: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [227] { System.out.print(yytext() + \" \"); }");
            { System.out.print(yytext() + " ");
            }
          case 101: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { return newSym(sym.ERROR, yytext()); }");
            { return newSym(sym.ERROR, yytext());
            }
          case 102: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { Tables.symTable.put(countID, yytext());int c = countID; countID++; return newSym(sym.ID, c); }");
            { Tables.symTable.put(countID, yytext());int c = countID; countID++; return newSym(sym.ID, c);
            }
          case 103: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [178] { return newSym(sym.AND); }");
            { return newSym(sym.AND);
            }
          case 104: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [176] { return newSym(sym.MULT); }");
            { return newSym(sym.MULT);
            }
          case 105: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { return newSym(sym.DOT); }");
            { return newSym(sym.DOT);
            }
          case 106: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { /* Ignore whitespace. */ }");
            { /* Ignore whitespace. */
            }
          case 107: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [151] { return newSym(sym.RBRACE); }");
            { return newSym(sym.RBRACE);
            }
          case 108: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [177] { return newSym(sym.DIV); }");
            { return newSym(sym.DIV);
            }
          case 109: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { System.out.println(\"Illegal char, \'\" + yytext() +\"\' line: \" + yyline + \", column: \" + yychar); }");
            { System.out.println("Illegal char, '" + yytext() +"' line: " + yyline + ", column: " + yychar);
            }
          case 110: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { return newSym(sym.LPAREN); }");
            { return newSym(sym.LPAREN);
            }
          case 111: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { return newSym(sym.RPAREN); }");
            { return newSym(sym.RPAREN);
            }
          case 112: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [150] { return newSym(sym.LBRACE); }");
            { return newSym(sym.LBRACE);
            }
          case 113: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [161] { return newSym(sym.LT); }");
            { return newSym(sym.LT);
            }
          case 114: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [181] { return newSym(sym.MOD); }");
            { return newSym(sym.MOD);
            }
          case 115: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [160] { return newSym(sym.GT); }");
            { return newSym(sym.GT);
            }
          case 116: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { return newSym(sym.LBRACK); }");
            { return newSym(sym.LBRACK);
            }
          case 117: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { return newSym(sym.COLON); }");
            { return newSym(sym.COLON);
            }
          case 118: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { return newSym(sym.RBRACK); }");
            { return newSym(sym.RBRACK);
            }
          case 119: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { return newSym(sym.SEMICOLON); }");
            { return newSym(sym.SEMICOLON);
            }
          case 120: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { return newSym(sym.COMMA); }");
            { return newSym(sym.COMMA);
            }
          case 121: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [159] { return newSym(sym.EQ); }");
            { return newSym(sym.EQ);
            }
          case 122: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { return newSym(sym.NOT); }");
            { return newSym(sym.NOT);
            }
          case 123: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { return newSym(sym.COMP); }");
            { return newSym(sym.COMP);
            }
          case 124: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { return newSym(sym.QUESTION); }");
            { return newSym(sym.QUESTION);
            }
          case 125: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { return newSym(sym.OR); }");
            { return newSym(sym.OR);
            }
          case 126: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [174] { return newSym(sym.PLUS); }");
            { return newSym(sym.PLUS);
            }
          case 127: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [175] { return newSym(sym.MINUS); }");
            { return newSym(sym.MINUS);
            }
          case 128: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { return newSym(sym.XOR); }");
            { return newSym(sym.XOR);
            }
          case 129: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [207] { buff.setLength(0); yybegin(STRING); }");
            { buff.setLength(0); yybegin(STRING);
            }
          case 130: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [221] {  }");
            { 
            }
          case 131: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { yybegin(YYINITIAL); }");
            { yybegin(YYINITIAL);
            }
          case 132: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [245] { buff.append(yytext()); }");
            { buff.append(yytext());
            }
          case 133: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [232] { yybegin(YYINITIAL);  return newSym(sym.ERROR, \"Unterminated string constant\"); }");
            { yybegin(YYINITIAL);  return newSym(sym.ERROR, "Unterminated string constant");
            }
          case 134: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [231] { yybegin(YYINITIAL);Tables.stringTable.put(countString, buff);int c = countString; countString++; System.out.println(\"buffer: \" + buff); return newSym(sym.STRING,c); }");
            { yybegin(YYINITIAL);Tables.stringTable.put(countString, buff);int c = countString; countString++; System.out.println("buffer: " + buff); return newSym(sym.STRING,c);
            }
          case 135: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [203] { Tables.numTable.put(countNum, new Double(yytext()) );int c = countNum; countNum++; return newSym(sym.CONSTANT,c); }");
            { Tables.numTable.put(countNum, new Double(yytext()) );int c = countNum; countNum++; return newSym(sym.CONSTANT,c);
            }
          case 136: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [199] { Tables.symTable.put(countID, yytext());int c = countID; countID++; return newSym(sym.MEM_ID, c); }");
            { Tables.symTable.put(countID, yytext());int c = countID; countID++; return newSym(sym.MEM_ID, c);
            }
          case 137: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [170] { return newSym(sym.ANDAND); }");
            { return newSym(sym.ANDAND);
            }
          case 138: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { return newSym(sym.ANDEQ); }");
            { return newSym(sym.ANDEQ);
            }
          case 139: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [198] { Tables.symTable.put(countID, yytext());int c = countID; countID++; return newSym(sym.POINTER_ID, c); }");
            { Tables.symTable.put(countID, yytext());int c = countID; countID++; return newSym(sym.POINTER_ID, c);
            }
          case 140: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [187] { return newSym(sym.MULTEQ); }");
            { return newSym(sym.MULTEQ);
            }
          case 141: break;
          case 43: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { yybegin(COMMENT); System.out.print(\"comment: \"); }");
            { yybegin(COMMENT); System.out.print("comment: ");
            }
          case 142: break;
          case 44: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { System.out.print(\"comment line: \"); yybegin(LINE_COMMENT); }");
            { System.out.print("comment line: "); yybegin(LINE_COMMENT);
            }
          case 143: break;
          case 45: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [188] { return newSym(sym.DIVEQ); }");
            { return newSym(sym.DIVEQ);
            }
          case 144: break;
          case 46: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return newSym(sym.IF); }");
            { return newSym(sym.IF);
            }
          case 145: break;
          case 47: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { return newSym(sym.DO); }");
            { return newSym(sym.DO);
            }
          case 146: break;
          case 48: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [182] { return newSym(sym.LSHIFT); }");
            { return newSym(sym.LSHIFT);
            }
          case 147: break;
          case 49: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [167] { return newSym(sym.LTEQ); }");
            { return newSym(sym.LTEQ);
            }
          case 148: break;
          case 50: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [192] { return newSym(sym.MODEQ); }");
            { return newSym(sym.MODEQ);
            }
          case 149: break;
          case 51: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [183] { return newSym(sym.RSHIFT); }");
            { return newSym(sym.RSHIFT);
            }
          case 150: break;
          case 52: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [168] { return newSym(sym.GTEQ); }");
            { return newSym(sym.GTEQ);
            }
          case 151: break;
          case 53: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { return newSym(sym.EQEQ); }");
            { return newSym(sym.EQEQ);
            }
          case 152: break;
          case 54: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [169] { return newSym(sym.NOTEQ); }");
            { return newSym(sym.NOTEQ);
            }
          case 153: break;
          case 55: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [190] { return newSym(sym.OREQ); }");
            { return newSym(sym.OREQ);
            }
          case 154: break;
          case 56: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [171] { return newSym(sym.OROR); }");
            { return newSym(sym.OROR);
            }
          case 155: break;
          case 57: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { return newSym(sym.PLUSEQ); }");
            { return newSym(sym.PLUSEQ);
            }
          case 156: break;
          case 58: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { return newSym(sym.PLUSPLUS); }");
            { return newSym(sym.PLUSPLUS);
            }
          case 157: break;
          case 59: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [186] { return newSym(sym.MINUSEQ); }");
            { return newSym(sym.MINUSEQ);
            }
          case 158: break;
          case 60: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [173] { return newSym(sym.MINUSMINUS); }");
            { return newSym(sym.MINUSMINUS);
            }
          case 159: break;
          case 61: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [191] { return newSym(sym.XOREQ); }");
            { return newSym(sym.XOREQ);
            }
          case 160: break;
          case 62: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [220] { if (comment_nesting == 0) yybegin(YYINITIAL);comment_nesting--; }");
            { if (comment_nesting == 0) yybegin(YYINITIAL);comment_nesting--;
            }
          case 161: break;
          case 63: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [219] { comment_nesting++; System.out.println(\"comment_nesting: \" + comment_nesting); }");
            { comment_nesting++; System.out.println("comment_nesting: " + comment_nesting);
            }
          case 162: break;
          case 64: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { buff.append(\'\\n\'); }");
            { buff.append('\n');
            }
          case 163: break;
          case 65: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [241] { buff.append(\'\\b\'); }");
            { buff.append('\b');
            }
          case 164: break;
          case 66: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [239] { buff.append(\'\\t\'); }");
            { buff.append('\t');
            }
          case 165: break;
          case 67: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [243] { buff.append(\'\\f\'); }");
            { buff.append('\f');
            }
          case 166: break;
          case 68: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [204] { Tables.numTable.put(countNum, new Character(yytext().charAt(1)));int c = countNum; countNum++; return newSym(sym.CONSTANT,c); }");
            { Tables.numTable.put(countNum, new Character(yytext().charAt(1)));int c = countNum; countNum++; return newSym(sym.CONSTANT,c);
            }
          case 167: break;
          case 69: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return newSym(sym.INT_TYPE); }");
            { return newSym(sym.INT_TYPE);
            }
          case 168: break;
          case 70: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return newSym(sym.FOR); }");
            { return newSym(sym.FOR);
            }
          case 169: break;
          case 71: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { return newSym(sym.LSHIFTEQ); }");
            { return newSym(sym.LSHIFTEQ);
            }
          case 170: break;
          case 72: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { return newSym(sym.URSHIFT); }");
            { return newSym(sym.URSHIFT);
            }
          case 171: break;
          case 73: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [194] { return newSym(sym.RSHIFTEQ); }");
            { return newSym(sym.RSHIFTEQ);
            }
          case 172: break;
          case 74: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return newSym(sym.BYTE); }");
            { return newSym(sym.BYTE);
            }
          case 173: break;
          case 75: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return newSym(sym.ELSE); }");
            { return newSym(sym.ELSE);
            }
          case 174: break;
          case 76: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { return newSym(sym.THIS); }");
            { return newSym(sym.THIS);
            }
          case 175: break;
          case 77: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { return newSym(sym.CASE); }");
            { return newSym(sym.CASE);
            }
          case 176: break;
          case 78: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return newSym(sym.CHAR_TYPE); }");
            { return newSym(sym.CHAR_TYPE);
            }
          case 177: break;
          case 79: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return newSym(sym.LONG_TYPE); }");
            { return newSym(sym.LONG_TYPE);
            }
          case 178: break;
          case 80: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return newSym(sym.GOTO); }");
            { return newSym(sym.GOTO);
            }
          case 179: break;
          case 81: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { return newSym(sym.VOID); }");
            { return newSym(sym.VOID);
            }
          case 180: break;
          case 82: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { return newSym(sym.NULL_LITERAL); }");
            { return newSym(sym.NULL_LITERAL);
            }
          case 181: break;
          case 83: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { return newSym(sym.URSHIFTEQ); }");
            { return newSym(sym.URSHIFTEQ);
            }
          case 182: break;
          case 84: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return newSym(sym.BREAK); }");
            { return newSym(sym.BREAK);
            }
          case 183: break;
          case 85: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { return newSym(sym.CATCH); }");
            { return newSym(sym.CATCH);
            }
          case 184: break;
          case 86: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return newSym(sym.CONST); }");
            { return newSym(sym.CONST);
            }
          case 185: break;
          case 87: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return newSym(sym.SHORT_TYPE); }");
            { return newSym(sym.SHORT_TYPE);
            }
          case 186: break;
          case 88: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { return newSym(sym.FINAL); }");
            { return newSym(sym.FINAL);
            }
          case 187: break;
          case 89: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return newSym(sym.FLOAT_TYPE); }");
            { return newSym(sym.FLOAT_TYPE);
            }
          case 188: break;
          case 90: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { return newSym(sym.WHILE); }");
            { return newSym(sym.WHILE);
            }
          case 189: break;
          case 91: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return newSym(sym.RETURN); }");
            { return newSym(sym.RETURN);
            }
          case 190: break;
          case 92: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { return newSym(sym.STATIC); }");
            { return newSym(sym.STATIC);
            }
          case 191: break;
          case 93: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return newSym(sym.SWITCH); }");
            { return newSym(sym.SWITCH);
            }
          case 192: break;
          case 94: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return newSym(sym.DOUBLE_TYPE); }");
            { return newSym(sym.DOUBLE_TYPE);
            }
          case 193: break;
          case 95: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return newSym(sym.EXTENDS); }");
            { return newSym(sym.EXTENDS);
            }
          case 194: break;
          case 96: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return newSym(sym.DEFAULT); }");
            { return newSym(sym.DEFAULT);
            }
          case 195: break;
          case 97: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return newSym(sym.FINALLY); }");
            { return newSym(sym.FINALLY);
            }
          case 196: break;
          case 98: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { return newSym(sym.CONTINUE); }");
            { return newSym(sym.CONTINUE);
            }
          case 197: break;
          case 99: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { return newSym(sym.VOLATILE); }");
            { return newSym(sym.VOLATILE);
            }
          case 198: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PascalLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        PascalLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new PascalLexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
